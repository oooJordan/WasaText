openapi: 3.0.3
info:
  title: WASATEXT
  version: "1.0.0"
  description: |-
    API for the WASAText messaging application
  contact:
    name: Giordana Foglia
    email: foglia.2046738@studenti.uniroma1.it
    
tags:
  - name: login
    description: Endpoint per la gestione del login
  - name: upload
    description: Endpoint per la gestione del caricamento immagine
  - name: user
    description: Endpoint per ottenere lista utenti
  - name: conversation
    description: Endpoint per la gestione delle conversazioni
  - name: messages
    description: Endpoint per gestire i messaggi
  - name: groups
    description: Endpoint per gestire i gruppi

servers:
  - url: http://localhost:3000/v1

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  parameters:
    ConversationId:
      name: conversation_id
      in: path
      required: true
      description: "The unique identifier of the conversation"
      schema:
        $ref: "#/components/schemas/ConversationId"
    
    MessageId:
      name: message_id
      in: path
      required: true
      description: "The unique identifier of the message"
      schema:
        $ref: "#/components/schemas/MessageIdentifier"
    
    CommentId:
      name: comment_id
      in: path
      required: true
      description: "The unique identifier of the comment"
      schema:
        $ref: "#/components/schemas/CommentIdentifier"
    
    UserId:
      name: user_id
      in: query
      required: true
      description: "The unique identifier of the User"
      schema:
        $ref: "#/components/schemas/UserIdentifier"

  schemas:
    Stringa:
      type: string
      description: "represent a message or a comment or a feedback"
      example: "Ciao, come stai?"
      pattern: '^.*?$'
      minLength: 3
      maxLength: 200

    ConversationId:
      type: integer
      description: "Unique identifier for the conversation"
      minimum: 0
      maximum: 9999
      readOnly: true
      example: 823

    Image:
      description: "URL representing the location of the image"
      type: string
      format: url
      example: "https://example.com/images/12345.jpg"
      minLength: 10
      maxLength: 2048
      pattern: "^https?:\\/\\/[a-zA-Z0-9_-]+(?:\\.[a-zA-Z0-9_-]+)*(\\/([a-zA-Z0-9_-]+))*\\/[a-zA-Z0-9_-]+\\.[a-zA-Z0-9]{2,4}$"

    Timestamp:
      description: "Date-Time with format gg/mm/aa-oo-mm-ss"
      type: string
      minLength: 0
      maxLength: 32
      format: date-time
      example: "2024-11-02T14:30:00Z"

    Name:
      type: string
      description: "username for an user"
      example: "Matteo"
      pattern: '^.*?$'
      minLength: 3
      maxLength: 16

    UserIdentifier:
      description: this object represents a user's ID
      type: integer
      minimum: 0
      maximum: 9999
      readOnly: true
      example: 999

    MessageIdentifier:
      type: integer
      description: "Unique identifier for the message"
      minimum: 0
      maximum: 9999
      readOnly: true
      example: 888

    CommentIdentifier:
      type: object
      description: "Schema for the unique identifier of the comment's emoji"
      properties:
        emojiId:
          type: integer
          description: "Unique identifier for the comment emoji"
          minimum: 0
          maximum: 9999
          readOnly: true
          example: 203
    
    CommentEmoji:
      type: object
      description: "Schema for the emoji code associated with a comment"
      properties:
        emojiCode:
          type: string
          description: "Unicode code for the emoji used in the comment"
          example: "U+276"
          minLength: 1
          maxLength: 20
          pattern: "^[A-Za-z0-9+]+$"

    User:
      description: this object represents a user
      type: object
      properties:
        userId:
          $ref: "#/components/schemas/UserIdentifier"
        nickname:
          $ref: "#/components/schemas/Name"
      example:
        userId: 222
        username: "Matteo"

    UsersList:
      description: List of users
      type: object
      properties:
        users:
          description: List of users
          type: array
          minItems: 0
          maxItems: 100
          items:
            $ref: "#/components/schemas/User"
      required:
        - users

  responses:
    Error400:
      description: Bad request, invalid input parameters

    Error401:
      description: Unauthorized, user must be logged in

    Error403:
      description: Forbidden, the user does not have permission

    Error404:
      description: Requested resource not found

    Error409:
      description: Conflict, resource already exists or is in use
      
    Error413:
      description: "File too large"

    Error415:
      description: "Unsupported file type"
      
    Error500:
      description: Internal server error
      
    
#LOGIN UTENTE ATTRAVERSO USERNAME
paths:
  /session:
    post:
      tags: ["login"]
      summary: Login the user
      description: |-
        If the user doesn't exist, it will be created, and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: |-
          User details
        required: true
        content:
          application/json: 
            schema:
              type: object
              description: "username"
              properties:
                name:
                  $ref: "#/components/schemas/Name"
      responses:
        '201':
          description: |-
            User log-in action successful
          content: 
            application/json:
              schema:
                type: object
                description: "user id"
                properties: 
                  identifier: 
                    $ref: "#/components/schemas/UserIdentifier"
              example:
                identifier: 377
        '400':
          $ref: "#/components/responses/Error400"
        '500':
          $ref: "#/components/responses/Error500"
    
    #MODIFICA USERNAME UTENTE
    put:
      tags: ["login"]
      summary: Update user username
      description: |-
        Allows the user to update their username. If the new username is already in use by another user, an error message will be sent.
      operationId: setMyUsername
      requestBody:
        description: |-
          New username to be set for the user.
        required: true
        content:
          application/json:
            schema:
              type: object
              description: "name update"
              properties:
                newUsername:
                  $ref: "#/components/schemas/Name"
      responses:
        '200':
          description: |-
            Username updated successfully.
          content:
            application/json:
              schema:
                type: object
                description: "check feedback"
                properties:
                  feedback:
                    $ref: "#/components/schemas/Stringa"
              example:
                feedback: "Username updated from Matteo to MatteoNew"
                  
        '400':
          $ref: "#/components/responses/Error400"
        '401':
          $ref: "#/components/responses/Error401"
        '409':
          $ref: "#/components/responses/Error409"
        '500':
          $ref: "#/components/responses/Error500"
      security:
        - bearerAuth: []

  /upload:
    post:
      tags: ["upload"]
      summary: Upload an image
      description: Uploads an image file and returns a URL
      operationId: uploadFile
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              description: "image file format"
              properties:
                file:
                  type: string
                  format: binary
                  minLength: 1
                  maxLength: 100000
                  description: image file to upload
      responses:
        '201':
          description: image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                description: "view image uploaded"
                properties:
                  imageUrl:
                    $ref: "#/components/schemas/Image"
              example:
                imageUrl: "https://example.com/image.jpg"
        '400':
          $ref: "#/components/responses/Error400"
        '413':
          $ref: "#/components/responses/Error413"
        '415':
          $ref: "#/components/responses/Error415"
        '500':
          $ref: "#/components/responses/Error500"
        

  #MODIFICA IMMAGINE DI PROFILO UTENTE
  /session/{user_id}/profile_image:
    post: 
      tags: ["login"]
      summary: Upload and update user's profile image
      description: This endpoint allows the user to upload a new profile image, which automatically updates their profile.
      operationId: uploadProfileimage
      parameters:
        - name: user_id
          in: path
          required: true
          description: "User Identifier"
          schema:
            $ref: "#/components/schemas/UserIdentifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: "Request schema for uploading and updating an image. The user must provide a file containing the image"
              properties:
                file:
                  type: string
                  format: binary
                  minLength: 1
                  maxLength: 1000000
                  description: "The profile image file to upload"
      responses:
        '200':
          description: Profile image uploaded and updated successfully
          content:
            application/json:
              schema:
                type: object
                description: "Response schema for a successfully uploaded and updated profile image"
                properties:
                  imageUrl:
                    $ref: "#/components/schemas/Image"
                  feedback:
                    $ref: "#/components/schemas/Stringa"
              example: 
                imageUrl: "https://example.com/image.jpg"
                feedback: "Profile image updated successfully"
        '400':
          $ref: "#/components/responses/Error400"
        '401':
          $ref: "#/components/responses/Error401"
        '500':
          $ref: "#/components/responses/Error500"
      security:
        - bearerAuth: []

  
  #RICERCA UTENTE NELL'APP ATTRAVERSO USERNAME
  /users:
    get:
      tags: ["user"]
      summary: List all users
      description: Returns a list of all users in the application, with an optional filter by username
      operationId: searchUsers
      parameters:
        - name: username
          in: query
          required: false
          description: The username to filter the list of users
          schema:
            $ref: "#/components/schemas/Name"
      responses:
        '200':
          description: A list of users has been successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersList"
              example:
                users:
                  - userId: 333
                    username: "Matteo"
                  - userId: 444
                    username: "Jordan"
        '400':
          $ref: "#/components/responses/Error400"
        '404':
          $ref: "#/components/responses/Error404"
        '500':
          $ref: "#/components/responses/Error500"
      security:
        - bearerAuth: []

  #LISTA TUTTE CONVERSAZIONI DELL'UTENTE
  /conversation:
    get:
      tags: ["conversation"]
      summary: User's conversation list
      description: |-
        Shows the user's entire conversation list after login
      operationId: getMyConversations
      responses:
        '200':
          description: List of conversations obtained
          content:
            application/json:
              schema:
                type: object
                description: "conversations"
                required:
                  - conversation
                properties:
                  conversation:
                    type: array
                    description: "Array of conversations"
                    minItems: 1
                    maxItems: 100
                    items:
                      type: object
                      properties:
                        conversationId:
                          $ref: "#/components/schemas/ConversationId"
                        lastMessage:
                          $ref: "#/components/schemas/Stringa"
                        timestamp:
                          $ref: "#/components/schemas/Timestamp"
                        statusMessageRead:
                          type: boolean
                          description: "Status of whether the message has been read"
                          example: false
                        profileimage:
                          $ref: "#/components/schemas/Image"
                        nameChat:
                          $ref: "#/components/schemas/Name"
              example:
                conversation:  # This is where the collection of conversations goes
                  - conversationId: 124
                    lastMessage: "Ciao, come stai?"
                    timestamp: "2024-11-13T12:30:00Z"
                    statusMessageRead: false
                    profileimage: "https://example.com/image.jpg"
                    nameChat: "Family"
                  - conversationId: 123
                    lastMessage: "bella foto"
                    timestamp: "2024-11-13T12:30:00Z"
                    statusMessageRead: true
                    profileimage: "https://example.com/image2.jpg"
                    nameChat: "Fede"

        '204':
          description: |-
            The request has been made but there aren't conversations to view
        '401':
          $ref: "#/components/responses/Error401"
        '500':
          $ref: "#/components/responses/Error500"
      security:
        - bearerAuth: []

  #INIZIA UNA NUOVA CONVERSAZIONE (CHATPRIVATA O GRUPPO)
    post:
      tags: ["conversation"]
      summary: Start a new conversation
      description: |-
        Start a new conversation with a user or create a group if multiple users are provided
      operationId: startConversation
      requestBody:
        description: |-
          Details for starting a new conversation
        content:
          application/json:
            schema:
              type: object
              description: "type of chat"
              properties:
                chatType:
                  type: string
                  enum: [private_chat, group_chat] #tipo di chat che voglio creare
                  description: |-
                    Type of conversation I want to create
                  example: "group_chat"
                imageGroup:
                  $ref: "#/components/schemas/Image"
                authorId:
                  $ref: "#/components/schemas/UserIdentifier"
                usersId:
                  type: array
                  description: "User identifier"
                  items:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/UserIdentifier"
                  minItems: 1
                  maxItems: 50
                startMessage:
                  $ref: "#/components/schemas/Stringa"
                groupName:
                  $ref: "#/components/schemas/Stringa"
              required:
                - chatType
                - usersId
                - authorId
                - startMessage
        required: true
      responses:
        '201':
          description: |-
            conversation created successfully
          content:
            application/json:
              schema:
                type: object
                description: "view of the chat"
                properties:
                  convId:
                    $ref: "#/components/schemas/ConversationId"
                  startMessageId:
                    $ref: "#/components/schemas/MessageIdentifier"
              example:
                convId: 12
                startMessageId: 33
        '400':
          $ref: "#/components/responses/Error400"
        '401':
          $ref: "#/components/responses/Error401"
        '403':
          $ref: "#/components/responses/Error403"
        '500':
          $ref: "#/components/responses/Error500"
      security:
        - bearerAuth: []

#QUI POSSO VEDERE LA CRONOLOGIA DELLE CONVERSAZIONI
  /conversation/{conversation_id}:
      parameters:
      - $ref: "#/components/parameters/ConversationId"
      get:
        tags: ["conversation"]
        summary: Viewing message history
        description: |-
          A user can view the message history of a conversation or a group
        operationId: getConversation
        parameters:
          - name: chat_type
            in: query
            required: true
            schema:
              type: string
              enum: [private_chat, group_chat]
            description: |-
              Type of conversation, used to indicate if the conversation is a private chat or group chat
        responses:
          '200':
            description: |-
              The view with the details of the entire conversation has been performed
            content:
              application/json:
                schema:
                  type: object
                  description: "all messages with details"
                  required:
                    - messages
                  properties:
                    messages:
                      type: array
                      minItems: 1
                      maxItems: 200
                      description: "An array of messages in the conversation. Each message contains details about the sender, content, and status"
                      items:
                        type: object
                        description: "specific to the message"
                        required:
                          - sender
                          - timestamp
                          - contentType
                        properties:
                          sender:
                            $ref: "#/components/schemas/Name"
                          timestamp:
                            $ref: "#/components/schemas/Timestamp"
                          contentType:
                            type: string
                            enum: [text, image, text_with_image]
                            description: "The type of content in the message. Can be 'text', 'image', or 'text_with_image'"
                            example: "text_with_image"
                          content:
                            $ref: "#/components/schemas/Stringa"
                          imageUrl:
                            $ref: "#/components/schemas/Image"
                          statusMessageRead:
                            type: boolean
                            example: false
                            description: "Indicates whether the message has been read by the recipient (true if read, false if not)"
                          emoji:
                            $ref: "#/components/schemas/CommentIdentifier"
                example:
                  messages:
                    - sender: "John Doe"
                      timestamp: "2024-11-13T12:00:00Z"
                      contentType: "text_with_image"
                      content: "ciao, come stai?"
                      imageUrl: "https://example.com/image.jpg"
                      statusMessageRead: false
                      emoji:
                        id: 290
                        unicode: "😊"
                        
          '401':
            $ref: "#/components/responses/Error401"
          '404':
            $ref: "#/components/responses/Error404"
          '500':
            $ref: "#/components/responses/Error500"
        security:
        - bearerAuth: []

      #INVIO DI UN NUOVO MESSAGGIO (DI TESTO, GIF O ENTRAMBI)
      post:
        tags: ["conversation"]
        summary: Send new message
        operationId: sendMessage
        description: Send a new message (text, gif or gif+text)
        requestBody:
          description: |-
            Content of the message, which may include optional media files
          required: true
          content:
            application/json:
              schema:
                type: object
                description: "message costruct"
                properties:             
                  senderId:
                    $ref: "#/components/schemas/UserIdentifier"
                  content:
                    $ref: "#/components/schemas/Stringa"
                  media:
                    type: string
                    enum: [text, gif, gif_with_text]  # Enum per il tipo di media
                    example: gif
                    description: |-
                      Type of media being sent with the message. Can be text, gif, or gifWithText
                  image:
                     $ref: "#/components/schemas/Image"
                  timestamp:
                    $ref: "#/components/schemas/Timestamp"
                required:
                  - senderId
                  - media 

        responses:
          '201':
            description: |-
              Message sent successfully
            content:
              application/json:
                schema:
                  type: object
                  description: "specified message"
                  properties: 
                    messageId:
                      $ref: "#/components/schemas/MessageIdentifier"
                example:
                  messageId: 718
          '400':
            $ref: "#/components/responses/Error400"
          '401':
            $ref: "#/components/responses/Error401"
          '500':
            $ref: "#/components/responses/Error500"
        security:
        - bearerAuth: []

  #INOLTRA UN MESSAGGIO
  /conversation/{conversation_id}/messages/{message_id}/forward:
    post:
      tags: ["messages"]
      summary: Forwards a specific message
      description: Forwards a specific message from one conversation to another conversation or group chat
      operationId: forwardMessage
      parameters:
        - $ref: "#/components/parameters/ConversationId"
        - $ref: "#/components/parameters/MessageId"
        - name: final_conversation_id
          in: query
          required: true
          description: "The unique identifier of the final conversation"
          schema:
            $ref: "#/components/schemas/ConversationId"
      responses:
        '200':
          description: Message forwarded successfully
          content:
            application/json:
              schema:
                type: object
                description: "feedback status comment on message"
                properties:
                  forwardedMessageId:
                    $ref: "#/components/schemas/MessageIdentifier"
                  feedback:
                    $ref: "#/components/schemas/Stringa"
              example: 
                feedback: "Message forwarded successfully"
        '400':
          $ref: "#/components/responses/Error400"
        '401':
          $ref: "#/components/responses/Error401"
        '404':
          $ref: "#/components/responses/Error404"
        '500':
          $ref: "#/components/responses/Error500"
      security:
        - bearerAuth: []
  #ELIMINA UN MESSAGGIO SPECIFICO
  /conversation/{conversation_id}/messages/{message_id}/delete:
    delete:
      tags: ["messages"]
      summary: Delete a message
      description: |-
        Deletes a message sent by the user.
        Only the sender of the message can delete it.
        Once deleted, the message will no longer appear in the conversation.
      operationId: deleteMessage
      parameters:
        - $ref: "#/components/parameters/ConversationId"
        - $ref: "#/components/parameters/MessageId"
        - $ref: "#/components/parameters/UserId"

      responses:
        '200':
          description: |-
            Message deleted successfully
          content:
            application/json:
              schema:
                type: object
                description: "status message"
                properties:
                  feedback:
                    $ref: "#/components/schemas/Stringa"
              example: 
                feedback: "Message deleted successfully"
        '400':
          $ref: "#/components/responses/Error400"
        '401':
          $ref: "#/components/responses/Error401"
        '403':
          $ref: "#/components/responses/Error403"
        '404':
          $ref: "#/components/responses/Error404"
        '500':
          $ref: "#/components/responses/Error500"
      security:
        - bearerAuth: []

  #AGGIUNGE UNA REACTION
  /conversation/{conversation_id}/messages/{message_id}/comment:
    post:
      tags: ["messages"]
      summary: Add comment (emoji reaction) to a message
      description: |-
        Adds a comment on an existing message with an emoji reaction. 
        The reaction doesn't modify the original message, and users can react to a message with one emoji.
      operationId: commentMessage
      parameters:
        - $ref: "#/components/parameters/ConversationId"
        - $ref: "#/components/parameters/MessageId"
      requestBody:
        description: |-
          Details of the emoji reaction to be added to the message
        required: true
        content: 
          application/json:
            schema: 
              type: object
              description: "add an emoji on a message"
              properties:
                userId:
                  $ref: "#/components/schemas/UserIdentifier" 
                emoji:
                  $ref: '#/components/schemas/CommentEmoji'
              required: 
                - userId 
                - emoji
      responses:
        '201':
          description: |-
            Reaction added successfully           
          content:
            application/json:
              schema: 
                type: object
                description: "status reaction"
                properties:
                  commentId:
                    $ref: "#/components/schemas/CommentIdentifier"
                  messageId:
                    $ref: "#/components/schemas/MessageIdentifier"
                  feedback:
                    $ref: "#/components/schemas/Stringa"
              example: 
                feedback: "reaction added"
        '400':
          $ref: "#/components/responses/Error400"
        '401':
          $ref: "#/components/responses/Error401"
        '404':
          $ref: "#/components/responses/Error404"
        '500':
          $ref: "#/components/responses/Error500"
      security:
        - bearerAuth: []

  #ELIMINA UNA RECTION DA UN MESSAGGIO SPECIFICO
  /conversation/{conversation_id}/messages/{message_id}/comment/{comment_id}:
    delete:
      tags: ["messages"]
      summary: Remove reaction (emoji) from a message
      description: |-
        Removes a previously added reaction (emoji) from a specified message.
        Only the user who added the reaction can remove it.
      operationId: uncommentMessage
      parameters:
        - $ref: "#/components/parameters/ConversationId"
        - $ref: "#/components/parameters/MessageId"
        - $ref: "#/components/parameters/CommentId"
        - $ref: "#/components/parameters/UserId"
      responses:
        '200':
          description: |-
            Reaction removed successfully
          content:
            application/json:
              schema:
                type: object
                description: "status reaction"
                properties:
                  messageId:
                    $ref: "#/components/schemas/MessageIdentifier"
                  feedback:
                    $ref: "#/components/schemas/Stringa"
              example: 
                feedback: "reaction removed"
        '400':
          $ref: "#/components/responses/Error400"
        '401':
          $ref: "#/components/responses/Error401"
        '403':
          $ref: "#/components/responses/Error403"
        '404':
          $ref: "#/components/responses/Error404"
        '500':
          $ref: "#/components/responses/Error500"
      security:
        - bearerAuth: []

  
  # AGGIUNTA DI MEMBRI AD UN GRUPPO GIA ESISTENTE
  /conversation/{conversation_id}/names:
    post:
      tags: ["groups"]
      summary: Add users to a group
      description: "This endpoint adds one or more users to a specific group conversation based on the conversation ID"
      operationId: addToGroup
      parameters:
        - $ref: "#/components/parameters/ConversationId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsersList"
      responses:
        '200':
          description: User(s) have been successfully added to the group
          content:
            application/json:
              schema:
                type: object
                description: "user enter status"
                properties:
                  feedback:
                    $ref: "#/components/schemas/Stringa"
              example: 
                feedback: "User(s) added to the group successfully."
        '404':
          $ref: "#/components/responses/Error404"
        '403':
          $ref: "#/components/responses/Error403"
        '400':
          $ref: "#/components/responses/Error400"
        '500':
          $ref: "#/components/responses/Error500"
      security:
        - bearerAuth: []

  /conversation/{conversation_id}/leave:
    post:
      tags: ["groups"]
      summary: Leave a group
      description: |-
        Allows the user to leave a specified group. If this leaves the group empty, the group will be deleted.
      operationId: leaveGroup
      parameters:
        - $ref: "#/components/parameters/ConversationId"
      responses:
        '200':
          description: |-
            Successfully left the group. If you were the last member, the group has been deleted
          content:
            application/json:
              schema:
                type: object
                description: "feedback on the group members status"
                properties:
                  feedback:
                    $ref: "#/components/schemas/Stringa"
              example: 
                feedback: "You have left the group. If you were the last member, the group has been deleted"
        '400':
          $ref: "#/components/responses/Error400"
        '403':
          $ref: "#/components/responses/Error403"
        '404':
          $ref: "#/components/responses/Error404"
        '500':
          $ref: "#/components/responses/Error500"
      security:
        - bearerAuth: []

  #MODIFICA NOME DI UN GRUPPO GIA ESISTENTE
  /conversation/{conversation_id}/name:
    put:
      tags: ["groups"]
      summary: Rename a group
      description: |-
        Allows any member of the group to change the group's name.
      operationId: setGroupname
      parameters:
        - $ref: "#/components/parameters/ConversationId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: "The request body for renaming a group, which contains the new name"
              properties:
                newname:
                  $ref: "#/components/schemas/Name"
              required:
                - newname
      responses:
        '200':
          description: Successfully renamed the group
          content:
            application/json:
              schema:
                type: object
                description: "The response object containing the feedback after renaming the group."
                properties:
                  feedback:
                    $ref: "#/components/schemas/Stringa"
              example:
                feedback: The group has been renamed to New Group name
                    
        '400':
          $ref: "#/components/responses/Error400"
        '403':
          $ref: "#/components/responses/Error403"
        '404':
          $ref: "#/components/responses/Error404"
        '500':
          $ref: "#/components/responses/Error500"
      security:
        - bearerAuth: []
  
  #MODIFICA IMMAGINE DI UN GRUPPO GIA ESISTENTE
  /conversation/{conversation_id}/groupimage:
    put:
      tags: ["groups"]
      summary: Update image group profile
      description: |-
        Allows any member of the group to change the group's properties, including the image. The image file must first be uploaded using the /upload endpoint.
      operationId: updateGroup
      parameters:
        - $ref: "#/components/parameters/ConversationId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: "Schema for updating the group image in a conversation"
              properties:
                imageUrl:
                  $ref: "#/components/schemas/Image"
      responses:
        '200':
          description: Successfully updated the group's information
          content:
            application/json:
              schema:
                type: object
                description: Schema for the response after successfully updating the group information
                properties:
                  feedback:
                    $ref: "#/components/schemas/Stringa"
              example:
                feedback: "The group's information has been updated successfully."
        '400':
          $ref: "#/components/responses/Error400" 
        '403':
          $ref: "#/components/responses/Error403"
        '404':
          $ref: "#/components/responses/Error404"
        '500':
          $ref: "#/components/responses/Error500"
      security:
        - bearerAuth: []
