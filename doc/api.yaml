openapi: 3.0.3
info:
  title: WASATEXT
  version: "1.0.0"
  description: |-
    API for the WASAText messaging application
  contact:
    name: Giordana Foglia
    email: foglia.2046738@studenti.uniroma1.it
servers:
  - url: http://localhost:3000
tags:
  - name: login
    description: Endpoint per la gestione del login
  - name: upload
    description: Endpoint per la gestione del caricamento immagine
  - name: user
    description: Endpoint per ottenere lista utenti
  - name: conversation
    description: Endpoint per la gestione delle conversazioni
  - name: messages
    description: Endpoint per gestire i messaggi
  - name: groups
    description: Endpoint per gestire i gruppi

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  parameters:
    ConversationId:
      name: conversation_id
      in: path
      required: true
      description: "The unique identifier of the conversation"
      schema:
        $ref: "#/components/schemas/ConversationId"
    
    MessageId:
      name: message_id
      in: path
      required: true
      description: "The unique identifier of the message"
      schema:
        $ref: "#/components/schemas/MessageIdentifier"
        
    UserName:
      name: name
      in: query
      required: false
      description: The username to filter the list of users
      schema:
        $ref: "#/components/schemas/Name"

  schemas:
    Stringa:
      type: string
      description: "represent a message or a comment or a feedback"
      example: "Ciao, come stai?"
      pattern: '^.*?$'
      minLength: 1
      maxLength: 200
    
    ContentType:
      type: string
      enum: [text, gif, gif_with_text]
      description: "The type of content in the message. Can be 'text', 'gif', or 'text_with_gif'"
      example: "gif"

    ResChatType:
      type: object
      description: "Chat type"
      properties:
        ChatType:
          type: string
          enum: [private_chat, group_chat]
          description: |
            Type of conversation I want to create
          example: "group_chat"
      required: 
        - ChatType  # Ensure ChatType is required in the parent object
      

    ConversationId:
      type: integer
      description: "Unique identifier for the conversation"
      minimum: 0
      maximum: 9999
      readOnly: true
      example: 823

    Image:
      description: "URL representing the location of the image"
      type: string
      format: url
      example: "https://example.com/images/12345.jpg"
      minLength: 10
      maxLength: 2048
      pattern: "^https?:\\/\\/[a-zA-Z0-9_-]+(?:\\.[a-zA-Z0-9_-]+)*(\\/([a-zA-Z0-9_-]+))*\\/[a-zA-Z0-9_-]+\\.[a-zA-Z0-9]{2,4}$"

    Timestamp:
      description: "Date-Time with format gg/mm/aa-oo-mm-ss"
      type: string
      minLength: 0
      maxLength: 32
      format: date-time
      example: "2024-11-02T14:30:00Z"

    Name:
      type: string
      description: "username for an user"
      example: "Matteo"
      pattern: '^.*?$'
      minLength: 3
      maxLength: 16

    UserIdentifier:
      description: this object represents a user's ID
      type: integer
      minimum: 0
      maximum: 9999
      readOnly: true
      example: 999

    MessageIdentifier:
      type: integer
      description: "Unique identifier for the message"
      minimum: 0
      maximum: 9999
      readOnly: true
      example: 888
    
    MessageSent:
      type: object
      description: "message costruct"
      properties:             
        content:
          $ref: "#/components/schemas/Stringa" #text
        media:
          $ref: "#/components/schemas/ContentType" #enum
        image:
            $ref: "#/components/schemas/Image" #immagine
      required:
        - media

    MessageRicv:
      type: object
      description: "message recv costruct"
      properties:
        username:
          $ref: "#/components/schemas/Name"
        message_id:
          $ref: "#/components/schemas/MessageIdentifier" #message_id
        content:
          $ref: "#/components/schemas/Stringa" #text
        media:
          $ref: "#/components/schemas/ContentType" #enum
        image:
            $ref: "#/components/schemas/Image" #immagine
        timestamp:
            $ref: "#/components/schemas/Timestamp" #timestamp
        statusMessageRead:
            type: boolean
            description: "Status of whether the message has been read"
        comment:
          $ref: "#/components/schemas/CommentEmoji"
      required:
        - media
        - timestamp
        - username


    CommentEmoji:
      type: object
      description: "Schema for the emoji code associated with a comment"
      properties:
        username:
          $ref: "#/components/schemas/Name"
        emojiCode:
          type: string
          description: "Unicode code for the emoji used in the comment"
          example: "U+276"
          minLength: 1
          maxLength: 20
          pattern: "^[A-Za-z0-9+]+$"

    User:
      description: this object represents a user
      type: object
      properties:
        nickname:
          $ref: "#/components/schemas/Name"
        image:
            $ref: "#/components/schemas/Image"
      example:
        userId: 222
        username: "Matteo"
        image: "https://example.com/images/12345.jpg"

    UsersList:
      description: List of users
      type: object
      properties:
        users:
          description: List of users
          type: array
          minItems: 0
          maxItems: 100
          items:
            $ref: "#/components/schemas/User"
      required:
        - users
        
    
    Conversation:
      type: object
      description: "all messages with details"
      required:
        - messages
        - utenti
      properties:
        utenti:
           $ref: "#/components/schemas/UsersList"
        messages:
          type: array
          minItems: 1
          maxItems: 200
          description: "An array of messages in the conversation. Each message contains details about the sender, content, and status"
          items:
            type: object
            description: "specific to the message"
            properties:
              message:
                $ref: "#/components/schemas/MessageRicv"

  responses:
    Error400:
      description: Bad request, invalid input parameters

    Error401:
      description: Unauthorized, user must be logged in

    Error403:
      description: Forbidden, the user does not have permission

    Error404:
      description: Requested resource not found

    Error409:
      description: Conflict, resource already exists or is in use
      
    Error413:
      description: "File too large"

    Error415:
      description: "Unsupported file type"
      
    Error500:
      description: Internal server error
    
#LOGIN UTENTE ATTRAVERSO USERNAME
paths:
  /session:
    post:
      tags: ["login"]
      summary: Login the user
      description: |-
        If the user doesn't exist, it will be created, and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: |-
          User details
        required: true
        content:
          application/json: 
            schema:
              type: object
              description: "username"
              properties:
                name:
                  $ref: "#/components/schemas/Name"
      responses:
        '201':
          description: |-
            User log-in action successful
          content: 
            application/json:
              schema:
                type: object
                description: "user id"
                properties: 
                  identifier: 
                    $ref: "#/components/schemas/UserIdentifier"
              example:
                identifier: 377
        '400':
          $ref: "#/components/responses/Error400"
        '500':
          $ref: "#/components/responses/Error500"

  /username:
    #MODIFICA USERNAME UTENTE
    put:
      tags: ["user"]
      summary: Update user username
      description: |-
        Allows the user to update their username. If the new username is already in use by another user, an error message will be sent.
      operationId: setMyUserName
      requestBody:
        description: |-
          New username to be set for the user.
        required: true
        content:
          application/json:
            schema:
              type: object
              description: "name update"
              properties:
                newUsername:
                  $ref: "#/components/schemas/Name"
      responses:
        '204':
          description: Username updated successfully      
        '400':
          $ref: "#/components/responses/Error400"
        '401':
          $ref: "#/components/responses/Error401"
        '409':
          $ref: "#/components/responses/Error409"
        '500':
          $ref: "#/components/responses/Error500"
      security:
        - bearerAuth: [] 

 #CARICA IMMAGINE
  /upload:
    post:
      tags: ["upload"]
      summary: Upload an image
      description: Uploads an image file and returns a URL
      operationId: uploadFile
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              description: "image file format"
              properties:
                file:
                  type: string
                  format: binary
                  minLength: 1
                  maxLength: 100000
                  description: image file to upload
      responses:
        '201':
          description: image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                description: "view image uploaded"
                properties:
                  imageUrl:
                    $ref: "#/components/schemas/Image"
        '400':
          $ref: "#/components/responses/Error400"
        '413':
          $ref: "#/components/responses/Error413"
        '415':
          $ref: "#/components/responses/Error415"
        '500':
          $ref: "#/components/responses/Error500"
      security:
        - bearerAuth: [] 

  #MODIFICA IMMAGINE DI PROFILO UTENTE
  /profile_image:
    post: 
      tags: ["user"]
      summary: update user's profile image
      description: This endpoint allows the user to update a new profile image
      operationId: setMyPhoto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: "new image"
              properties:
                image:
                  $ref: "#/components/schemas/Image"
      responses:
        '204':
          description: Profile image uploaded and updated successfully
        '400':
          $ref: "#/components/responses/Error400"
        '401':
          $ref: "#/components/responses/Error401"
        '500':
          $ref: "#/components/responses/Error500"
      security:
        - bearerAuth: [] 

    #OTTIENI IMMAGINE 
    get:
      tags: ["user"]
      summary: get image
      description: This endpoint allows the user to get an image
      operationId: getImage
      responses:
        '200':
          description: "image getting successfully"
          content:
            application/json:
              schema:
                type: object
                description: "the image"
                properties:
                  actualImage:
                    $ref: "#/components/schemas/Image"
        '400':
          $ref: "#/components/responses/Error400"
        '401':
          $ref: "#/components/responses/Error401"
        '500':
          $ref: "#/components/responses/Error500"
      security:
        - bearerAuth: [] 


  
  #RICERCA UTENTE NELL'APP ATTRAVERSO USERNAME
  /users:
    parameters:
    - $ref: "#/components/parameters/UserName"
    get:
      tags: ["user"]
      summary: List all users
      description: Returns a list of all users in the application, with an optional filter by username
      operationId: searchUsers
      responses:
        '200':
          description: A list of users has been successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersList"
        '400':
          $ref: "#/components/responses/Error400"
        '403':
          $ref: "#/components/responses/Error403"
        '404':
          $ref: "#/components/responses/Error404"
        '500':
          $ref: "#/components/responses/Error500"
      security:
        - bearerAuth: [] 

  #LISTA TUTTE CONVERSAZIONI DELL'UTENTE
  /conversations:
    get:
      tags: ["conversation"]
      summary: User's conversation list
      description: |-
        Shows the user's entire conversation list after login
      operationId: getMyConversations
      responses:
        '200':
          description: List of conversations obtained
          content:
            application/json:
              schema:
                type: object
                description: "conversations"
                required:
                  - conversation
                properties:
                  conversation:
                    type: array
                    description: "Array of conversations"
                    minItems: 1
                    maxItems: 100
                    items:
                      type: object
                      properties:
                        conversationId:
                          $ref: "#/components/schemas/ConversationId"
                        lastMessage:
                          $ref: "#/components/schemas/MessageRicv"
                        profileimage:
                          $ref: "#/components/schemas/Image"
                        nameChat:
                          $ref: "#/components/schemas/Name"
                        chatType:
                          $ref: "#/components/schemas/ResChatType"

        '204':
          description: "The request has been made but there aren't conversations to view"
        '401':
          $ref: "#/components/responses/Error401"
        '500':
          $ref: "#/components/responses/Error500"
      security:
        - bearerAuth: [] 

  #INIZIA UNA NUOVA CONVERSAZIONE (CHATPRIVATA O GRUPPO)
    post:
      tags: ["conversation"]
      summary: Start a new conversation
      description: |-
        Start a new conversation with a user or create a group if multiple users are provided
      operationId: startConversation
      requestBody:
        description: |-
          Details for starting a new conversation
        content:
          application/json:
            schema:
              type: object
              description: "type of chat"
              properties:
                chatType:
                  $ref: "#/components/schemas/ResChatType"
                imageGroup:
                  $ref: "#/components/schemas/Image"
                usersname:
                  type: array
                  description: "Username"
                  items:
                    $ref: "#/components/schemas/Name"
                  minItems: 1
                  maxItems: 50
                startMessage:
                  $ref: "#/components/schemas/MessageSent"
                groupName:
                  $ref: "#/components/schemas/Name"
              required:
                - chatType
                - usersname
                - startMessage
        required: true
      responses:
        '201':
          description: |-
            conversation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '400':
          $ref: "#/components/responses/Error400"
        '401':
          $ref: "#/components/responses/Error401"
        '403':
          $ref: "#/components/responses/Error403"
        '500':
          $ref: "#/components/responses/Error500"
      security:
        - bearerAuth: [] 

#QUI POSSO VEDERE LA CRONOLOGIA DELLE CONVERSAZIONI
  /conversation/{conversation_id}:
      parameters:
      - $ref: "#/components/parameters/ConversationId"
      - $ref: "#/components/parameters/UserName"
      get:
        tags: ["conversation"]
        summary: Viewing message history
        description: |-
          A user can view the message history of a conversation or a group
        operationId: getConversation
        responses:
          '200':
            description: |-
              The view with the details of the entire conversation has been performed
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Conversation'
          '401':
            $ref: "#/components/responses/Error401"
          '404':
            $ref: "#/components/responses/Error404"
          '500':
            $ref: "#/components/responses/Error500"
        security:
          - bearerAuth: [] 

      #INVIO DI UN NUOVO MESSAGGIO (DI TESTO, GIF O ENTRAMBI)
      post:
        tags: ["conversation"]
        summary: Send new message
        operationId: sendMessage
        description: Send a new message (text, gif or gif+text)
        requestBody:
          description: |-
            Content of the message, which may include optional media files
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageSent"
        responses:
          '201':
            description: |-
              Message sent successfully
            content:
              application/json:
                schema:
                  type: object
                  description: "specified message"
                  properties: 
                    messageId:
                      $ref: "#/components/schemas/MessageIdentifier"
          '400':
            $ref: "#/components/responses/Error400"
          '401':
            $ref: "#/components/responses/Error401"
          '500':
            $ref: "#/components/responses/Error500"
        security:
          - bearerAuth: [] 

  #INOLTRA UN MESSAGGIO
  /conversation/{conversation_id}/messages/{message_id}:
    parameters:
        - $ref: "#/components/parameters/ConversationId"
        - $ref: "#/components/parameters/MessageId"
    post:
      tags: ["messages"]
      summary: Forwards a specific message
      description: Forwards a specific message from one conversation to another conversation or group chat
      operationId: forwardMessage
      responses:
        '201':
          description: Message forwarded successfully
          content:
            application/json:
              schema:
                type: object
                description: "feedback status comment on message"
                properties:
                  forwardedMessageId:
                    $ref: "#/components/schemas/MessageIdentifier"
        '400':
          $ref: "#/components/responses/Error400"
        '401':
          $ref: "#/components/responses/Error401"
        '404':
          $ref: "#/components/responses/Error404"
        '500':
          $ref: "#/components/responses/Error500"
      security:
        - bearerAuth: [] 

  #ELIMINA UN MESSAGGIO SPECIFICO
    delete:
      tags: ["messages"]
      summary: Delete a message
      description: |-
        Deletes a message sent by the user.
        Only the sender of the message can delete it.
        Once deleted, the message will no longer appear in the conversation.
      operationId: deleteMessage
      
      responses:
        '204':
          description: "Message deleted successfully"
        '400':
          $ref: "#/components/responses/Error400"
        '401':
          $ref: "#/components/responses/Error401"
        '403':
          $ref: "#/components/responses/Error403"
        '404':
          $ref: "#/components/responses/Error404"
        '500':
          $ref: "#/components/responses/Error500"
      security:
        - bearerAuth: [] 

  #AGGIUNGE UNA REACTION
  /conversation/{conversation_id}/messages/{message_id}/comment:
    parameters:
        - $ref: "#/components/parameters/ConversationId"
        - $ref: "#/components/parameters/MessageId"
    put:
      tags: ["messages"]
      summary: Add comment (emoji reaction) to a message
      description: |-
        Adds a comment on an existing message with an emoji reaction. 
        The reaction doesn't modify the original message, and users can react to a message with one emoji.
      operationId: commentMessage
      requestBody:
        description: |-
          Details of the emoji reaction to be added to the message
        required: true
        content: 
          application/json:
            schema:
              type: object
              description: "add an emoji on a message"
              properties: 
                emoji:
                  $ref: '#/components/schemas/CommentEmoji'

      responses:
        '204':
          description: "Reaction added successfully"
        '400':
          $ref: "#/components/responses/Error400"
        '401':
          $ref: "#/components/responses/Error401"
        '404':
          $ref: "#/components/responses/Error404"
        '500':
          $ref: "#/components/responses/Error500"
      security:
        - bearerAuth: [] 

  #ELIMINA UNA RECTION DA UN MESSAGGIO SPECIFICO
    delete:
      tags: ["messages"]
      summary: Remove reaction (emoji) from a message
      description: |-
        Removes a previously added reaction (emoji) from a specified message.
        Only the user who added the reaction can remove it.
      operationId: uncommentMessage
      responses:
        '204':
          description: "Reaction removed successfully"
        '400':
          $ref: "#/components/responses/Error400"
        '401':
          $ref: "#/components/responses/Error401"
        '403':
          $ref: "#/components/responses/Error403"
        '404':
          $ref: "#/components/responses/Error404"
        '500':
          $ref: "#/components/responses/Error500"
      security:
        - bearerAuth: [] 

  
  # AGGIUNTA DI MEMBRI AD UN GRUPPO GIA ESISTENTE
  /conversation/{conversation_id}/names:
    parameters:
      - $ref: "#/components/parameters/ConversationId"
    put:
      tags: ["groups"]
      summary: Add users to a group
      description: "This endpoint adds one or more users to a specific group conversation based on the conversation ID"
      operationId: addToGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Name"
      responses:
        '204':
          description: "User(s) have been successfully added to the group"
        '404':
          $ref: "#/components/responses/Error404"
        '403':
          $ref: "#/components/responses/Error403"
        '400':
          $ref: "#/components/responses/Error400"
        '500':
          $ref: "#/components/responses/Error500"
      security:
        - bearerAuth: [] 
#ESCI DAL GRUPPO
  /conversation/{conversation_id}/leave:
    parameters:
      - $ref: "#/components/parameters/ConversationId"
    post:
      tags: ["groups"]
      summary: Leave a group
      description: |-
        Allows the user to leave a specified group. If this leaves the group empty, the group will be deleted.
      operationId: leaveGroup
      responses:
        '204':
          description: "Successfully left the group. If you were the last member, the group has been deleted"
        '400':
          $ref: "#/components/responses/Error400"
        '403':
          $ref: "#/components/responses/Error403"
        '404':
          $ref: "#/components/responses/Error404"
        '500':
          $ref: "#/components/responses/Error500"
      security:
        - bearerAuth: [] 

  #MODIFICA NOME DI UN GRUPPO GIA ESISTENTE
  /conversation/{conversation_id}/name:
    parameters:
      - $ref: "#/components/parameters/ConversationId"
    put:
      tags: ["groups"]
      summary: Rename a group
      description: |-
        Allows any member of the group to change the group's name.
      operationId: setGroupName
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: "The request body for renaming a group, which contains the new name"
              properties:
                newname:
                  $ref: "#/components/schemas/Name"
              required:
                - newname
      responses:
        '204':
          description: "Successfully renamed the group"         
        '400':
          $ref: "#/components/responses/Error400"
        '403':
          $ref: "#/components/responses/Error403"
        '404':
          $ref: "#/components/responses/Error404"
        '500':
          $ref: "#/components/responses/Error500"
      security:
        - bearerAuth: [] 
  
  #MODIFICA IMMAGINE DI UN GRUPPO GIA ESISTENTE
  /conversation/{conversation_id}/groupimage:
    parameters:
      - $ref: "#/components/parameters/ConversationId"
    put:
      tags: ["groups"]
      summary: Update image group profile
      description: |-
        Allows any member of the group to change the group's properties, including the image. The image file must first be uploaded using the /upload endpoint.
      operationId: setGroupPhoto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: "Schema for updating the group image in a conversation"
              properties:
                imageUrl:
                  $ref: "#/components/schemas/Image"
      responses:
        '204':
          description: "Successfully updated the group's information"
        '400':
          $ref: "#/components/responses/Error400" 
        '403':
          $ref: "#/components/responses/Error403"
        '404':
          $ref: "#/components/responses/Error404"
        '500':
          $ref: "#/components/responses/Error500"
      security:
        - bearerAuth: [] 
